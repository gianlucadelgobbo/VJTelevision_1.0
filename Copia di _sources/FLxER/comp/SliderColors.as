package FLxER.comp {	import flash.display.Sprite;	import flash.utils.*;	import flash.events.*;	import flash.geom.Rectangle;	import fl.motion.Color;	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.comp.ButtonRett;	public class SliderColors extends Sprite {		var w:uint;		var h:uint;		var myStart:Number;		var maxVal:Number;		var minVal:Number;		var fnz:Function;		var param:String;		var alt:String;		///////		var filo:Rett;		var path:ButtonRett;		public var lab:Txt;		var curs:ButtonRett;		//		var xReset:Number;		var tmpDC:int;		var myInt:Number;		//		public function SliderColors(xx:Number, yy:Number, ww:uint, hh:uint, c:uint, s:Number, min:Number, max:Number, f:Function, p:String, a:String):void {			x = xx;			y = yy;			w = ww;			h = hh;			myStart = s			maxVal = max;			minVal = min			fnz = f			param = p			alt = a;			this.filo = new Rett(0, 0, w-25, h, 0x999999, -1, 1);			this.addChild(filo);			this.path = new ButtonRett(1, 1, w-27, h-2, pathPress, true, null, .3);			path.buttonMode = false;			this.addChild(path);						this.lab = new Txt(w-25, 0, 25, 11, "0", Preferences.pref.th, "input", setValNum);			this.addChild(lab);			this.curs = new ButtonRett(1, 1, 6, h-2, myPress, param, alt, 1);			//curs.mouseUpAcivation(myRelease);			curs.buttonMode = false;			var cTint:Color = new Color();			cTint.setTint(c, 1);			curs.transform.colorTransform = cTint;			this.addChild(curs);						myInt = path.width-curs.width;			lab.text = myStart;			curs.x = xReset = (((myStart-minVal)/(maxVal-minVal))*myInt)+path.x;			this.tmpDC = getTimer();		}		function pathPress(p:String):void {			curs.x = (this.mouseX<=myInt+1 ? this.mouseX : myInt+1);			mySetValue(null);		}		function mySetValue(p:String):void {			var tmp = parseInt((((curs.x-path.x)/myInt)*(maxVal-minVal))+minVal);			lab.text = tmp;			fnz(param,tmp)		}		public function getVal():Number {			return -parseInt(lab.text);		}		public function setVal(p:Number):void {			lab.text = p.toString();			muovi(lab.text);		}		private function setValNum(t:String):void {			this.parent.parent.change_ch();			muovi(t)		}		public function muovi(t:String):void {			var tmp:int = parseInt(lab.text);			curs.x = ((tmp-minVal)/(maxVal-minVal))*myInt;			fnz(param, tmp)		}		function myPress(p:String):void {			this.parent.parent.change_ch();			if (getTimer()-this.tmpDC>300) {				curs.startDrag(false, new Rectangle(1, 1, myInt, 0));				stage.addEventListener(Event.ENTER_FRAME, mySetValue)				stage.addEventListener(MouseEvent.MOUSE_UP, myRelease)				//this.addEventListener(MouseEvent.MOUSE_MOVE, mySetValue)			} else {				curs.stopDrag();				curs.x = xReset;				mySetValue(null);			}			this.tmpDC = getTimer();		}		function myRelease(p:String):void {			curs.stopDrag();			stage.removeEventListener(Event.ENTER_FRAME, mySetValue)			stage.removeEventListener(MouseEvent.MOUSE_UP, myRelease)		}		public function resetta():void {			curs.x = xReset;			mySetValue(null);		}	}}