package FLxER{	import flash.display.Sprite;	import flash.display.StageAlign;    import flash.display.StageScaleMode;	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import flash.events.*;	import flash.utils.*;	import flash.net.*;	import flash.net.SharedObject;	//	import FLxER.core.FlxerInterface;	import FLxER.core.Monitor;	import FLxER.panels.Preloader;	import FLxER.panels.Options;	import FLxER.panels.Mess;	import FLxER.core.FlxerSSConnector;	import FLxER.panels.OptionsRemote;	public class FlxerStarterRemoteOut extends Sprite {		public var monitor		:Monitor;		//		var c					:uint;		var receiving_lc		:LocalConnection;		var startDelay			:uint;		var splash				:Preloader;		//var plugInLoader		:Loader;		var myAlert				:Mess;		var myAlertR			:OptionsRemote;		//		var myFlxerSSConnectorReceiver	:FlxerSSConnector;		public var myPrefSO		:SharedObject;		var myLoader			:URLLoader;		public function FlxerStarterRemoteOut():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE, resizer);			stage.showDefaultContextMenu = false;			startDelay = 500;			Preferences.createPref(stage.stageWidth,stage.stageHeight)			splash = new Preloader(40338);			this.addChild(splash);			myPrefSO = SharedObject.getLocal("flxerPref","/",false);			Preferences.pref.flxerDrawedMasks = SharedObject.getLocal("flxerDrawedMasks", "/", false);			if (myPrefSO.data.flxerPref == undefined || myPrefSO.data.flxerPref.childNodes[0].childNodes[4] == undefined) {				loadPref();			} else {				// 4 TO 5 flxerPref = flxerPref;				Preferences.pref.flxerPref = new XMLDocument(myPrefSO.data.flxerPref);				Preferences.updateCol();				c = setInterval(openOptions, 500);			}			//_root.myTabIndex = 1;		}		function loadPref():void {			myLoader = new URLLoader(new URLRequest("preferences/flxerPref.xml"));			myLoader.addEventListener("complete", firstStartup);			myLoader.addEventListener("ioError", xmlNotLoaded);		}		function firstStartup(event:Event):void {			Preferences.pref.flxerPref = new XMLDocument(parseXML(myLoader.data));			Preferences.pref.flxerPref.ignoreWhite = true;			myPrefSO.data.flxerPref = Preferences.pref.flxerPref;			myPrefSO.flush();			Preferences.updateCol();			c = setInterval(openOptions, 500);		}		function openOptions():void {			if (getTimer() > startDelay) {				clearInterval(c);				this.removeChildAt(0);				myAlert = new Mess(200, 100, "ALERT", "Drag this window on the monitor extension\n\nthat you want to use an then click OK\n\n", goFull);				stage.addEventListener(KeyboardEvent.KEY_DOWN, goFullKey);  				this.addChild(myAlert);			}		}		function goFullKey(event:Event):void {			this.removeChild(myAlert);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, goFullKey);  			goFull()		}		function goFull():void {			stage.displayState = "fullScreen";    			startup();			myFlxerSSConnectorReceiver = new FlxerSSConnector(null,monitor.mbuto);			myAlertR = new OptionsRemote(400, 300, "REMOTE RECEIVER MODE OPTIONS", myFlxerSSConnectorReceiver);			this.addChild(myAlertR);		}		/*public function setMonitor(obj) {			//this.trgt.removeChildAt(0);			trace("bella2")			Preferences.pref.monXscale = obj.monXscale			Preferences.pref.monYscale = obj.monYscale			Preferences.pref.dScaleX = obj.dScaleX;			Preferences.pref.dScaleY = obj.dScaleY;			clearInterval(c);			loadPlugin();		};		function SSConnectorOk(ww,hh) {			trace("ww "+ ww)			trace("hh "+ hh)						_global.monXscale = (ww/400)*100;			_global.monYscale = (hh/300)*100;			if(ww/hh>4/3){				_global.dScaleX = _global.monYscale/_global.monXscale;				_global.dScaleY = 1;			} else {				_global.dScaleX = 1;				_global.dScaleY = _global.monXscale/_global.monYscale;			}			loadPlugin()		}		function checkMonOut() {			this.myOptions.visible = true;			clearInterval(c);			myAlert = new Mess(200, 100, "ALERT", "Before to start you have to run the application named:\n\n- FLxER4monitorOut\n\n");			this.addChild(myAlert);		}*/		function xmlNotLoaded(event:Event):void {			trace("Data not loaded."+event);		}		public function startup():void {			if (Preferences.pref.flxerPref.childNodes[0].childNodes[2].attributes.value == "true") {				Preferences.pref.vKS = true;			} else {				Preferences.pref.vKS = false;			}			Preferences.pref.nCh = parseInt(Preferences.pref.flxerPref.childNodes[0].childNodes[0].attributes.value.toString());			if (Preferences.pref.nCh < 1) {				Preferences.pref.nCh = 1;			} else if (Preferences.pref.nCh > 7) {				Preferences.pref.nCh = 7;			} else if (isNaN(Preferences.pref.nCh)) {				Preferences.pref.nCh = 7;			}			interfaceDrawer();		}		function interfaceDrawer():void {			monitor = new Monitor(0, 0, Preferences.pref.w, Preferences.pref.h, Preferences.pref.nCh, false);			this.addChild(monitor);			resizer(null)		}		public function mbuto(a:String):void {			trace("monitor.mbuto(a)")			monitor.mbuto(a);		};		public function getMonitor():void {			var sending_lc = new LocalConnection();			sending_lc.send("lc_mon", "setMonitor", Preferences.pref.monObj);		}		function resizer(event:Event):void {			trace("resizer"+event)			monitor.resizer(stage.stageWidth,stage.stageHeight);			/*var monXscale = (stage.stageWidth/400);			var monYscale = (stage.stageHeight/300);			var dScaleX;			var dScaleY;			trace(stage.stageWidth)			if(stage.stageWidth/stage.stageHeight>4/3){				dScaleX = monYscale/monXscale;				dScaleY = 1;			} else {				dScaleX = 1;				dScaleY = monXscale/monYscale;			}			monitor.scaleX = monXscale;			monitor.scaleY = monYscale;			for (var a=0; a<Preferences.pref.nCh; a++) {				monitor.levels["ch_"+a].vid.scaleX = (dScaleX);				monitor.levels["ch_"+a].vid.scaleY = (dScaleY);				monitor.levels["ch_"+a].bkg.scaleX = 100/(dScaleX*100)				monitor.levels["ch_"+a].bkg.scaleY = 100/(dScaleY*100)				monitor.levels["ch_"+a].trgtMask.scaleX = (dScaleX)				monitor.levels["ch_"+a].trgtMask.scaleY = (dScaleY)				monitor.levels["ch_"+a].drawMask.scaleX = (dScaleX)				monitor.levels["ch_"+a].drawMask.scaleY = (dScaleY)			}			var monObj = new Object();			monObj.monXscale = monXscale*100;			monObj.monYscale = monYscale*100;			monObj.dScaleX = dScaleX;			monObj.dScaleY = dScaleY;			Preferences.pref.monObj = monObj;			trace("ssssssssssssssssssssssss "+dScaleX)*/			var monObj:Object = new Object();			monObj.monWidth = stage.stageWidth;			monObj.monHeight = stage.stageHeight;			Preferences.pref.monObj = monObj;		}		function resetta():void {			myPrefSO.clear();			var tmp:XML = new XML(flxerPref.childNodes[0]);			myPrefSO.data.flxerPref = tmp;			myPrefSO.flush();			/*for (var item in _root) {			if (_root[item]._x ! =  undefined) {			_root[item].removeMovieClip();			} else {			//delete _root[item]			}			}*/			interfaceDrawer();		}	}}