package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	import flash.geom.ColorTransform;	import FLxER.main.Rett;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.SliderColors;		public class ColorsCtrl extends Sprite {		var vidThumb,bkgThumb:Rett;		public var col_onoff,myBkgOnOff:CheckBoxBase;		public var rSlider,gSlider,bSlider,rbSlider,gbSlider,bbSlider:SliderColors;		public function ColorsCtrl(xx:int,yy:int):void {			this.x = xx;			this.y = yy;			this.col_onoff = new CheckBoxBase(0, 0, 11, 11, "MOVIE COLOR: ", colOnOff, null, true);			this.addChild(col_onoff);			this.vidThumb = new Rett(0, 12, 11, 23, 0xFFFFFF, -1, 1);			this.addChild(vidThumb);			var bithumb = new Rett(5, 0, 6, 23, 0x000000, -1, 1);			this.vidThumb.addChild(bithumb);			this.rSlider = new SliderColors(12,  0, 128, 11, 0xFF0000, 0, -255, 255, myColorer, "vid", "R + MOVE X MOUSE");			this.addChild(rSlider);			this.gSlider = new SliderColors(12, 12, 128, 11, 0x00FF00, 0, -255, 255, myColorer, "vid", "G + MOVE X MOUSE");			this.addChild(gSlider);			this.bSlider = new SliderColors(12, 24, 128, 11, 0x0000FF, 0, -255, 255, myColorer, "vid", "B + MOVE X MOUSE");			this.addChild(bSlider);			this.myBkgOnOff = new CheckBoxBase(143, 0, 11, 11, "BACKGROUND COLOR: ", bkgOnOff, null, false);			this.addChild(myBkgOnOff);			this.bkgThumb = new Rett(143, 12, 11, 23, 0xFFFFFF, -1, 1);			this.bkgThumb.transform.colorTransform = new ColorTransform(1, 1, 1, 1, -255, -255, -255, 1);			this.addChild(bkgThumb);			this.rbSlider = new SliderColors(155,  0, 100, 11, 0xFF0000, 255, 0, 255, myColorer, "bkg", "R + SHIFT + MOVE X MOUSE");			this.addChild(rbSlider);			this.gbSlider = new SliderColors(155, 12, 100, 11, 0x00FF00, 255, 0, 255, myColorer, "bkg", "G + SHIFT + MOVE X MOUSE");			this.addChild(gbSlider);			this.bbSlider = new SliderColors(155, 24, 100, 11, 0x0000FF, 255, 0, 255, myColorer, "bkg", "B + SHIFT + MOVE X MOUSE");			this.addChild(bbSlider);		}		public function resetta() {			this.parent.change_ch();			this.col_onoff.resetta();			this.rSlider.resetta();			this.gSlider.resetta();			this.bSlider.resetta();			this.myBkgOnOff.resetta();			this.rbSlider.resetta();			this.gbSlider.resetta();			this.bbSlider.resetta();		}		function myColorer(p:String,v:int):void {			var myVal:int = -v			var tmp:Array = p.split(",");			var r:Number;			var g:Number;			var b:Number;			if (p=="vid") {				r = rSlider.getVal();				g = gSlider.getVal();				b = bSlider.getVal();			} else {				r = rbSlider.getVal();				g = gbSlider.getVal();				b = bbSlider.getVal();			}			this[p+"Thumb"].transform.colorTransform = new ColorTransform(1, 1, 1, 1, r , g , b, 1)			parent.lastLiveAct = ",colorizing,"+this.parent.ch+","+p+","+r+","+g+","+b;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus && col_onoff.myStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.colorizing = parent.lastLiveAct;			}		}		function bkgOnOff(p:Boolean):void {			this.parent.change_ch();			parent.lastLiveAct = ",bkgOnOff,"+this.parent.ch+","+p;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus && col_onoff.myStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.bkgOnOff = parent.lastLiveAct;			}		}		function colOnOff(p:Boolean):void {			this.parent.change_ch();			var rb, gb, bb:int;			if (p) {				rb = parseInt(this.rSlider.getVal());				gb = parseInt(this.gSlider.getVal());				bb = parseInt(this.bSlider.getVal());			} else {				rb = gb = bb = 0;			}			parent.lastLiveAct = ",colorizing,"+this.parent.ch+",vid,"+rb+","+gb+","+bb;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.colorizing = parent.lastLiveAct;			}		}	}}