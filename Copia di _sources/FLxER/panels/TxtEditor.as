package FLxER.panels{	import flash.display.Sprite;	import flash.utils.getTimer;    import flash.events.Event;    import flash.events.IOErrorEvent;    import flash.net.URLLoader;    import flash.net.URLRequest;/*	import flash.utils.*;	import flash.geom.Point;	import flash.events.MouseEvent;*/	import FLxER.main.Txt;	import FLxER.comp.ButtonTxt;	import FLxER.comp.ListMenu;	public class TxtEditor extends Sprite {		////////		public var myTxtFont,myReaderMode:ListMenu;		public var left,center,right:ButtonTxt;		public var myTxtField:Txt;		var myAlignPuls:Array;		var myTxtLoader;		var txtInt:Number;		var myTxt:String;		var currentReaderMode;				public function TxtEditor(xx:int,yy:int):void {			this.x = xx;			this.y = yy;			this.visible = false;			myTxtFont = new ListMenu(24, 0, 56, 11, "standard 07_53", FONTtxt, undefined, Preferences.pref.myFonts.childNodes[0].childNodes[0], 3);			this.addChild(myTxtFont);			left = new ButtonTxt(81, 0, 10, 11, "E", ALIGNtxt, "left", null);			this.addChild(left);			center = new ButtonTxt(92, 0, 9, 11, "=", ALIGNtxt, "center", null);			center.myDisable();			this.addChild(center);			right = new ButtonTxt(102, 0, 10, 11, "3", ALIGNtxt, "right", null);			this.addChild(right);			myReaderMode = new ListMenu(113, 0, 39, 11, Preferences.pref.plugin.childNodes[0].childNodes[3].childNodes[0].attributes.m, readerMode, undefined, Preferences.pref.plugin.childNodes[0].childNodes[3], 3);			this.addChild(myReaderMode);			this.myAlignPuls = new Array("right", "center", "left");			myTxtField = new Txt(0, 12, 152, 23, "", Preferences.pref.th, "input",swapTxt);			this.addChild(myTxtField);			myTxtField.multiline = true;			myTxtField.wordWrap = true;			myTxtLoader = new URLLoader();			myTxtLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);            myTxtLoader.addEventListener(Event.COMPLETE, loaderCompleteHandler);			/*this.my_mcl = new MovieClipLoader();			this.createEmptyMovieClip("myReaderModeTrgt", this.getNextHighestDepth());			this.my_mcl.loadClip(Preferences.pref.plugin.childNodes[0].childNodes[3].attributes.path+Preferences.pref.plugin.childNodes[0].childNodes[3].childNodes[0].attributes.m, this.myReaderModeTrgt);			this.my_mclL = new Object();			this.my_mclL.owner = this;			this.my_mclL.onLoadInit = function(t) {				if (t) {					owner.currentReaderMode.starter(owner);				}			};			this.my_mcl.addListener(this.my_mclL);*/		}		function loaderCompleteHandler(event:Event):void {			newTxt(myTxtLoader.data);		}		function errorHandler(event:Event) {			parent.myMovie.val.text = "FILE NOT FOUND";			parent.myMovie.val.textColor = _global.bkgColOver;		}		function newTxt(txt:String):void {			//clearInterval(this.txtInt);			this.myTxt = Preferences.myReplace(txt, ",","");			myTxtField.text = this.myTxt;			var tmp = myReaderMode.getVal()			readerMode(tmp,tmp)			/*this.parent.tipo = "txt";			this.parent.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",preTxt,0,txt");			if (this.parent.outStatus) {				_root.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",preTxt,"+this.parent.ch+",txt");				this.myTxtOut = this.myTxt;			}			this.parent.current_mbuto_load = ",preTxt,"+this.parent.ch+","+this.parent.current_mov+","+this.parent.tipo+","+this.parent.sliderVal;			this.parent.current_mbuto_load2 = ",preTxt,0,"+this.parent.current_mov+","+this.parent.tipo+","+this.parent.sliderVal;			this.currentReaderMode.starter(this);*/		}		function readerMode(a:String,p:String):void {			this.parent.change_ch();			parent.lastLiveAct = ",loadMedia,"+this.parent.ch+","+Preferences.pref.plugin.childNodes[0].childNodes[3].attributes.path+p+",swf,"+this.parent.sliderVal+","+this.myTxt+","+Preferences.pref.msVal["ch_"+parent.ch];			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.loadMedia = parent.lastLiveAct;			}			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			/*clearInterval(this.txtInt);			this.my_mcl.loadClip(Preferences.pref.plugin.childNodes[0].childNodes[3].attributes.path+p, this.myReaderModeTrgt);*/		}		function swapTxt(p:String):void {			this.parent.change_ch();			/*this.parent.oldTipo = "txt";			clearInterval(this.txtInt);*/			newTxt(myTxtField.text);		}		/*function lettore(myKS, myKSOut, myKSStop) {			if (this.parent.previewStatus && !this.parent.myPreviewStopStatus && this.parent.oldTipo == "txt") {				this.parent.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",set_txt,0,"+myKS);			} else if (this.parent.oldTipo == "txt") {				this.parent.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",set_txt,0,"+myKSStop);			} else {				this.parent.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",set_txt,0, ");			}			if (myKSOut) {				_root.monitor.mbuto((getTimer()-_root.myGlobalCtrl.myRecorder.last_time)+",set_txt,"+this.parent.ch+","+myKSOut);			}		}*/		function FONTtxt(a:String,p:String):void {			this.parent.change_ch();			parent.lastLiveAct = ",FONTtxt,"+this.parent.ch+","+p;			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.FONTtxt = parent.lastLiveAct;			}			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}		}		function ALIGNtxt(p:String):void {			trace("ALIGNtxt "+p)			this.parent.change_ch();			for (var a:uint=0; a<this.myAlignPuls.length; a++) {				trace("SSSSSSSSSSSSSSS"+myAlignPuls[a])				if (this.myAlignPuls[a] == p) {					this[this.myAlignPuls[a]].myDisable();					parent.lastLiveAct = ",ALIGNtxt,"+this.parent.ch+","+p;					if (parent.outStatus) {						parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);					} else {						parent.liveA.ALIGNtxt = parent.lastLiveAct;					}					if (parent.monitor.previewStatus) {						parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);					}				} else {					this[this.myAlignPuls[a]].myEnable();				}			}		}	}}