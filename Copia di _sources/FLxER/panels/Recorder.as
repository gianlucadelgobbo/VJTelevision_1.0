package FLxER.panels {	import flash.display.Sprite;	import flash.events.*;	import flash.utils.*;	import flash.net.*;	import flash.net.SharedObject;	import flash.xml.XMLDocument;	import FLxER.main.Txt;	import FLxER.main.Rett;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonTxt;	import FLxER.comp.ListMenu;		public class Recorder extends Sprite {		var myLLSO:SharedObject;		var myLL:XMLDocument;		var R,P,L,X:Txt;		//		var myRecOnOff:CheckBoxBase;		var myRecName:Txt;		var myRecSave:ButtonTxt;		var myLocalOn:CheckBoxBase;		var myXmlOn:CheckBoxBase;		var myLibSel:ListMenu;		var myLoop:CheckBoxBase;		var myStop:ButtonTxt;		var myXmlName:Txt;		var myXmlLoad:CheckBoxBase;		///		var recStatus:Boolean;		var myLSO:SharedObject;		public var loopStatus:Boolean;		public var myLiveset:XMLDocument;		public function Recorder(xx:int):void {			x = xx			myLLSO = SharedObject.getLocal("livesetsList", "/", false);			if (myLLSO.data.livesetsList == undefined) {				myLL		 = new XMLDocument();				myLL.ignoreWhite = true;				myLL.parseXML("<livesetsList><livesetName m=\"bella\"/></livesetsList>")				myLLSO.data.livesetsList = myLL;				myLLSO.flush();			} else {				myLL = myLLSO.data.livesetsList;			}			R				 = new Txt(-3, 0, 0, 11, "RECORDER", Preferences.pref.th, null);			this.addChild(R);			myRecOnOff		 = new CheckBoxBase(0, 11, 73, 11, "START RECORDING", recOnOff, null, false);			this.addChild(myRecOnOff);				//			myRecName		 = new Txt(0, 11, 47, 11, "", Preferences.pref.th, "input", recSave);			this.addChild(myRecName);			myRecSave		 = new ButtonTxt(48, 11, 25, 11, "SAVE", recSave, null, null);			this.addChild(myRecSave);			P				 = new Txt(75, 0, 38, 11, "PLAYER", Preferences.pref.th, null);			this.addChild(P);			myLocalOn		 = new CheckBoxBase(117, 3, 5, 5, " ", localOn, null, true);			this.addChild(myLocalOn);			L				 = new Txt(121, 0, 28, 11, "local", Preferences.pref.th, null);			this.addChild(L);			myXmlOn			 = new CheckBoxBase(148, 3, 5, 5, " ", xmlOn, null, false);			this.addChild(myXmlOn);			X				 = new Txt(152, 0, 22, 11, "xml", Preferences.pref.th, null);			this.addChild(X);			myLibSel		 = new ListMenu(78, 11, 68, 11, "SELECT LIVESET", loadLlivesetSO, null, myLL.childNodes[0], 3);			this.addChild(myLibSel);			myLoop			 = new CheckBoxBase(148, 11, 24, 11, "LOOP", loop, null, false);			this.addChild(myLoop);			myStop			 = new ButtonTxt(174, 11, 24, 11, "STOP", stopLiveset, null, null);			this.addChild(myStop);			myXmlName		 = new Txt(78, 11, 68, 11, "", Preferences.pref.th, "input", xmlLoad);			this.addChild(myXmlName);			myXmlLoad		 = new CheckBoxBase(173, 11, 23, 11, "LOAD", loop, null, false);			this.addChild(myXmlLoad);			recStatus = false;			myRecSave.visible = false;			myRecName.visible = false;			myXmlLoad.visible = false;			myXmlName.visible = false;			loopStatus = false;		}		function xmlLoad(p:String):void {			if (myXmlName.text.length>4) {				myLoader = new URLLoader(new URLRequest("livesets/"+myXmlName.text));				myLoader.addEventListener("complete", firstStartup);				myLoader.addEventListener("ioError", xmlNotLoaded);			}		}		function firstStartup(event:Event):void {			trace(myLoader.data);			myLiveset = new XMLDocument();			myLiveset.ignoreWhite = true;			myLiveset.parseXML(myLoader.data);			liveok();		}		function localOn(p:Boolean):void {			if (p) {				myXmlOn.myStatus_swap();				myXmlLoad.visible = false;				myXmlName.visible = false;				myLibSel.visible = true;			}		}		function xmlOn(p:Boolean):void {			if (p) {				myXmlLoad.visible = true;				myXmlName.visible = true;				myLibSel.visible = false;				//myLocalOn.myEnable();				//myXmlOn.myDisable();				myLocalOn.myStatus_swap();			}		}		function recOnOff(p:Boolean):void {			Preferences.pref.recStatus = p;			if (p) {				myLiveset		 = new XMLDocument();				myLiveset.ignoreWhite = true;				myLiveset.parseXML("<liveset></liveset>");				var today_date:Date		 = new Date();				myLiveset.childNodes[0].attributes.date = today_date.getDate()+"/"+(today_date.getMonth()+1)+"/"+today_date.getFullYear();				for (var a=0; a<Preferences.pref.nCh; a++) {					Preferences.pref.interfaceTrgt.chCnt["ch_"+a].live(true);				}			} else {				myRecOnOff.visible = false;				myRecName.visible = true;				myRecName.text = "";				myRecSave.visible = true;			}		}		function recSave(p:String):void {			if (myRecName.text.length>2) {				if (myLL.childNodes[0].childNodes[0].attributes.m == undefined) {					myLL.childNodes[0].childNodes[0].attributes.m = myRecName.text;				} else {					var tmp = myLL.childNodes[0].childNodes[0].cloneNode(true);					myLL.childNodes[0].appendChild(tmp);					myLL.childNodes[0].childNodes[0].attributes.m = myRecName.text;				}				myLLSO.clear();				myLLSO = SharedObject.getLocal("livesetsList", "/", false);				myLLSO.data.livesetsList = myLL;				myLLSO.flush();				myLibSel.avvia(myLL.childNodes[0]);				myLSO = SharedObject.getLocal(myRecName.text, "/", false);				myLSO.data[myRecName.text] = myLiveset;				myLSO.flush();				myRecOnOff.visible = true;				myRecName.visible = false;				myRecSave.visible = false;			} else {				myRecName.text = "wrong name";			}		}		function loadLlivesetSO(m:String, p:String):void {			myLSO = SharedObject.getLocal(p, "/", false);			myLiveset = myLSO.data[p];			liveok();		}		function stopLiveset(p:String):void {			Preferences.pref.monitorTrgt.stop_liveset();		}		function loop(p:Boolean):void {			loopStatus = p;		}		function liveok():void {			Preferences.pref.monitorTrgt.n_play = 0;			Preferences.pref.monitorTrgt.play_liveset();		}	}}