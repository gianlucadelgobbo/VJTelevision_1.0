package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	//import flash.geom.ColorTransform;	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.core.Player;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonArrow;	import FLxER.comp.ButtonTxt;	import FLxER.comp.SliderTxt;		public class Trasform extends Sprite {		var myMovie:Sprite;		var myCh:Player;		//		var movieL:Txt;		var chL:Txt;		var chFlipV_m:CheckBoxBase;		var chFlipH_m:CheckBoxBase;		var x_m:SliderTxt;		var y_m:SliderTxt;		public var w_m:SliderTxt;		public var h_m:SliderTxt;		var rx_m:SliderTxt		var ry_m:SliderTxt;		var rz_m:SliderTxt;		var x_ch:SliderTxt;		var y_ch:SliderTxt;		var rx_ch:SliderTxt		var ry_ch:SliderTxt;		var rz_ch:SliderTxt;		var resettaButt:ButtonTxt;		////////		public function Trasform(xx:int,yy:int,n:uint):void {			trace("cazzo1")			trace(Preferences.pref.monitorTrgt.levels["ch_"+n])			trace("cazzo2")			myMovie = Preferences.pref.monitorTrgt.levels["ch_"+n].vid;			myCh = Preferences.pref.monitorTrgt.levels["ch_"+n];			x = xx;			y = yy;			this.movieL = new Txt(0, 0, 0, 0, "MOVIE", Preferences.pref.th, null);			this.addChild(movieL);			//this.movieL.rotation = -90;			this.chFlipV_m = new CheckBoxBase(50, 0,  11, 11, "»", chFlipH, null, false);			this.addChild(chFlipV_m);			this.chFlipH_m = new CheckBoxBase(69, 11, 11, 11, "»", chFlipV, null, false);			chFlipH_m.rotation = -90;			this.addChild(chFlipH_m);			//SliderTxt(xx,yy,ww,hh, l, s, min, max, f, p, a)			this.x_m = new SliderTxt(0, 12, 50, 11, "X", "px", myMovie.x, myMove, "alt", Preferences.pref.monitorTrgt.w/2);			this.addChild(x_m);			this.y_m = new SliderTxt(0, 24, 50, 11, "Y", "px", myMovie.y, myMove, "alt", Preferences.pref.monitorTrgt.h/2);			this.addChild(y_m);			this.w_m = new SliderTxt(55, 12, 40, 11, "W", "%", myMovie.scaleX, chScale, "alt");			this.addChild(w_m);			this.h_m = new SliderTxt(55, 24, 40, 11, "H", "%", myMovie.scaleY, chScale, "alt");			this.addChild(h_m);			this.rx_m = new SliderTxt(100, 0, 40, 11, "X", "°", myMovie.rotationX, myRotationM, "alt");			this.addChild(rx_m);			this.ry_m = new SliderTxt(100, 12, 40, 11, "Y", "°", myMovie.rotationY, myRotationM, "alt");			this.addChild(ry_m);			this.rz_m = new SliderTxt(100, 24, 40, 11, "Z", "°", myMovie.rotationZ, myRotationM, "alt");			this.addChild(rz_m);			this.chL = new Txt(147, 0, 0, 0, "CHANNEL", Preferences.pref.th, null);			this.addChild(chL);			//this.chL.rotation = -90;			this.x_ch = new SliderTxt(150, 12, 50, 11, "X", "px", myCh.x, myMove, "alt");			this.addChild(x_ch);			this.y_ch = new SliderTxt(150, 24, 50, 11, "Y", "px", myCh.y, myMove, "alt");			this.addChild(y_ch);			this.rx_ch = new SliderTxt(205, 0, 40, 11, "X", "°", myCh.rotationX, myRotationCh, "alt");			this.addChild(rx_ch);			this.ry_ch = new SliderTxt(205, 12, 40, 11, "Y", "°", myCh.rotationY, myRotationCh, "alt");			this.addChild(ry_ch);			this.rz_ch = new SliderTxt(205, 24, 40, 11, "Z", "°", myCh.rotationZ, myRotationCh, "alt");			this.addChild(rz_ch);			this.resettaButt = new ButtonTxt(248, 35, 35, 11, " RESET", resetta, "X", null);			this.resettaButt.rotation = -90;			this.addChild(resettaButt);		}		public function updateOnDrag():void {			this.x_m.setVal(myMovie.x);			this.y_m.setVal(myMovie.y);			this.x_ch.setVal(myCh.x);			this.y_ch.setVal(myCh.y);		}		function myRotationM(p:Number):void {			this.parent.change_ch();			parent.lastLiveAct = ",mRotate,"+this.parent.ch+","+rx_m.getVal()+","+ry_m.getVal()+","+rz_m.getVal();			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.mRotate = parent.lastLiveAct;			}		}		public function mouseRotationChX(p:Number):void {			rx_m.setVal(p)			myRotationM(p)		}		public function mouseRotationChY(p:Number):void {			ry_m.setVal(p)			myRotationM(p)		}		public function mouseRotationChZ(p:Number):void {			rz_m.setVal(p)			myRotationM(p)		}		function myRotationCh(p:Number):void {			this.parent.change_ch();			parent.lastLiveAct = ",chRotate,"+this.parent.ch+","+rx_ch.getVal()+","+ry_ch.getVal()+","+rz_ch.getVal();			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.chRotate = parent.lastLiveAct;			}		}		function myMove(p:Number):void {			this.parent.change_ch();			parent.lastLiveAct = ",chMove,"+this.parent.ch+","+x_ch.getVal()+","+y_ch.getVal()+","+x_m.getVal()+","+y_m.getVal();			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.chMove = parent.lastLiveAct;			}		}		function chScale(p:Number):void {			this.parent.change_ch();			parent.lastLiveAct = ",chScale,"+this.parent.ch+","+w_m.getVal()+","+h_m.getVal();			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.scala = parent.lastLiveAct;			}		}		public function mouseScale(p:Number,p2:Number):void {			this.w_m.setVal(p);					this.h_m.setVal(p2);			parent.lastLiveAct = ",chScale,"+this.parent.ch+","+p+","+p2;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.scala = parent.lastLiveAct;			}		}		function chFlipH(p:Boolean):void {			this.parent.change_ch();			parent.lastLiveAct = ",chFlipH,"+this.parent.ch+","+p;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.chFlipH = parent.lastLiveAct;			}		}		function chFlipV(p:Boolean):void {			this.parent.change_ch();			parent.lastLiveAct = ",chFlipV,"+this.parent.ch+","+p;			if (parent.monitor.previewStatus) {				parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			}			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.chFlipV = parent.lastLiveAct;			}		}		public function resetta(p:String):void {			this.parent.change_ch();			if (this.chFlipV_m.myStatus) {				this.chFlipV_m.myStatus_swap()			}			if (this.chFlipH_m.myStatus) {				this.chFlipH_m.myStatus_swap()			}			x_m.resetta();			y_m.resetta();			w_m.resetta();			h_m.resetta();			rx_m.resetta()			ry_m.resetta();			rz_m.resetta();			x_ch.resetta();			y_ch.resetta();			rx_ch.resetta()			ry_ch.resetta();			rz_ch.resetta();		}	}}