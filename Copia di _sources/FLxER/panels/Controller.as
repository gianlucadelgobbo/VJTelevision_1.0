package FLxER.panels {	import flash.display.Sprite;	import flash.utils.*;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonTxt;	public class Controller extends Sprite {		public var myRew:ButtonTxt;		public var myPlay:CheckBoxBase;		public var mySolo:CheckBoxBase;		public var myHide:CheckBoxBase;		var playVal:Boolean;		public var hideVal:Boolean;		public function Controller(xx:int,yy:int):void {			this.x = xx;			this.y = yy;			this.myRew = new ButtonTxt(0, 0, 13, 11, "<<", rewind, "", "ARROW LEFT");			this.addChild(myRew);			this.myPlay = new CheckBoxBase(14, 0, 9, 11, ">", playpause, "SPACE", true);			this.addChild(myPlay);			this.mySolo = new CheckBoxBase(24, 0, 12, 11, "SOLO: ", solo, "SHIFT + CTRL + SPACE", false);			//this.mySolo.mouseUpAcivation(solo);			this.addChild(mySolo);			this.myHide = new CheckBoxBase(37, 0, 12, 11, "HIDE: ", hider, "CTRL + SPACE", false);			this.addChild(myHide);			playVal = true;			hideVal = false;		}		public function resetta():void {			myPlay.resetta();			myHide.resetta();			mySolo.resetta();		}		function solo(p:Boolean):void {			this.parent.change_ch();			var a:uint;			if (p) {				Preferences.pref.mySeqA = new Object();				Preferences.pref.mySoloA = new Object();				for (a = 0; a<Preferences.pref.nCh; a++) {					if(parent.parent.chCnt["ch_"+a].myController.mySolo.myStatus && this.parent.ch != a){						parent.parent.chCnt["ch_"+a].myController.mySolo.mouseDownHandler(null);					}				}				for (a = 0; a<Preferences.pref.nCh; a++) {					//parent.parent.chCnt["ch_"+a].myController.myHide.myDisable();					Preferences.pref.mySeqA["ch_"+a] = parent.parent.chCnt["ch_"+a].mySequencer.seqStatus;					Preferences.pref.mySoloA["ch_"+a] = parent.parent.chCnt["ch_"+a].myController.hideVal;					if(parent.parent.chCnt["ch_"+a].mySequencer.seqStatus && this.parent.ch != a){						parent.parent.chCnt["ch_"+a].mySequencer.seq.mouseDownHandler(null);					}					if(!parent.parent.chCnt["ch_"+a].myController.hideVal && this.parent.ch != a){						parent.parent.chCnt["ch_"+a].myController.myHide.mouseDownHandler(null);					}				}			} else {				for (a = 0; a<Preferences.pref.nCh; a++) {					//parent.parent.chCnt["ch_"+a].myController.myHide.myEnable();					if(Preferences.pref.mySeqA["ch_"+a]){						parent.parent.chCnt["ch_"+a].mySequencer.seq.mouseDownHandler(null);					}					if(!Preferences.pref.mySoloA["ch_"+a] == parent.parent.chCnt["ch_"+a].myController.hideVal){						parent.parent.chCnt["ch_"+a].myController.myHide.mouseDownHandler(null);					}				}			}		}		function rewind(p:String):void {			this.parent.change_ch();			parent.lastLiveAct = ",REWIND,"+this.parent.ch;			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.rewindplaypause = parent.lastLiveAct;			}		}		function playpause(p:Boolean):void {			this.parent.change_ch();			var tmp:String;			playVal = p;			if (p == true) {				tmp = "PLAY";			} else if (p == false) {				tmp = "STOP";			}			parent.lastLiveAct = ","+tmp+","+this.parent.ch;			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.rewindplaypause = parent.lastLiveAct;			}		}		function hider(p:Boolean):void {			this.parent.change_ch();			var tmp:String;			hideVal = p;			if (hideVal) {				tmp = "HIDE";			} else {				tmp = "SHOW";			}			parent.lastLiveAct = ","+tmp+","+this.parent.ch;			if (parent.outStatus) {				parent.parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+parent.lastLiveAct);			} else {				parent.liveA.hider = parent.lastLiveAct;			}		}	}}