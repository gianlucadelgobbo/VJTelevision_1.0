package VJTV {	import flash.display.Sprite;	import flash.utils.*;	import flash.display.DisplayObjectContainer.*	import flash.geom.ColorTransform;	import flash.xml.XMLDocument;	import flash.net.*;	import flash.events.*;	import flash.display.Loader;    import flash.net.FileReference;	import fl.transitions.*;	import fl.transitions.easing.*;	import FLxER.main.Rett;	import FLxER.main.Txt;	import FLxER.comp.CheckBoxBase;	import FLxER.comp.ButtonTxt;	import FLxER.comp.ButtonArrow;	import FLxER.comp.ListMenu;	import FLxER.comp.ListBox;	import FLxER.comp.SliderCh;	import FLxER.panels.Preview;	import FLxER.panels.Sequencer;	import FLxER.panels.ColorsCtrl;	import FLxER.panels.Trasform;	import FLxER.panels.Image;	import FLxER.panels.Controller;	import VJTV.VJTVListItem;	import VJTV.DatePicker;	public class VJTVChCtrl extends Sprite {		public var ch:Number;		//		var fondino:Rett;		public var myLibSel:ListMenu;		public var myFileSel:ListBox;		var myMovie:Txt;		var myMovieL:ButtonTxt;		//		var myPalette:Array;		var myFileList:XMLDocument;		/**/		var a:uint;		var c:uint;		var l:uint;		var current_mov:String;		var lastLiveAct:String;		var tipo:String;		var oldTipo:String;		////		var currLib:String;		var myLoader:URLLoader		var MyFile:FileReference;		var firstTime:Boolean = true;		public var goToSec:Number;		var now:Date;		//		var list:Sprite;		var prev:ButtonTxt;		var succ:ButtonTxt;		var listSprites:Array;		var listPulsa:Array;		var h:uint;		var listTit:Txt		var listN:uint;		public var myY;		var page;		var chiudi		var cal:DatePicker		var myTween:Tween;		var pages:Txt;		public function VJTVChCtrl(hh):void {			ch = 0;			listSprites = new Array();			list = new Sprite();			this.addChild(list);			fondino = new Rett(0, 0, 500, 100, 0x333333, -1, .9);			list.addChild(fondino);			//			var now = new Date();			listTit = new Txt(0, 0, 250, 11, "Today: "+now.getFullYear()+"-"+(now.getMonth()+1)+"-"+now.getDate(), Preferences.pref.th, "");			list.addChild(listTit);			listTit.scaleX=listTit.scaleY=2			/////// COLORS ///			listPulsa = new Array();			listPulsa.push(new ButtonTxt(-80, 0, 78, 11, "TODAY", paletteHideShow, "today", null));			listPulsa.push(new ButtonTxt(-80, 12, 78, 11, "CHOOSE A DAY", paletteHideShow, "cal", null));			list.addChild(listPulsa[0]);			list.addChild(listPulsa[1]);			for (a=0; a<Preferences.pref.libraryList.childNodes[0].childNodes.length; a++) {				listPulsa.push(new ButtonTxt(-80, 12*(a+2), 78, 11, Preferences.pref.libraryList.childNodes[0].childNodes[a].attributes.m, paletteHideShow, a.toString(), null));				trace(Preferences.pref.libraryList.childNodes[0].childNodes[a])				list.addChild(listPulsa[(a+2)]);			}			succ = new ButtonTxt(500-50-48, h-23, 48, 11, "NEXT", pager, 1, null);			list.addChild(succ);			prev = new ButtonTxt(500-50-50-50-48, h-23, 48, 11, "PREVIOUS", pager, -1, null);			list.addChild(prev);			chiudi = new ButtonTxt(500-12, 2, 10, 11, "X", Preferences.pref.interfaceTrgt.apriMenu, -1, null);			list.addChild(chiudi);			pages = new Txt(0, h-23, 100, 11, "0 of 0 PAGES",Preferences.pref.th, "");			list.addChild(pages);			succ.scaleX=succ.scaleY=2			prev.scaleX=prev.scaleY=2			pages.scaleX=pages.scaleY=2			//////////////////////////////////			//			/*myLibSel = new ListMenu(2, 13, 128, 11, "select playlist", loadLib, "PAGE UP / PAGE DOWN", Preferences.pref.libraryList.childNodes[0], 3);			this.addChild(myLibSel);			myFileSel = new ListBox(2, 25, 128, 11, myLoadMovie, null, 1, "ARROW UP", "ARROW DOWN");			this.addChild(myFileSel);			myMovie = new Txt(2, 1, 105, 11, "Media", Preferences.pref.th, "");			this.addChild(myMovie);*/			//			cal = new DatePicker();			cal.setMaxDate(Preferences.pref.libraryList.childNodes[0].attributes.maxDate);			cal.setMinDate(Preferences.pref.libraryList.childNodes[0].attributes.minDate);			//cal.setDatum(1,1,2010);	//  optional: set initial Date (dd, mm, yyyy). if not set: default value is today			cal.setLang("en");  		//  "en" or "de", default: "de"			//cal.setSkin("white");		// "blue" or "white", default: "blue"			cal.addEventListener(Event.SELECT, function(e:Event):void{				var cc = cal.getDatum().split(".");				listTit.text = "Day: "+(cc[0].length<2 ? "0"+cc[0] : cc[0])+"-"+(cc[1].length<2 ? "0"+cc[1] : cc[1])+"-"+cc[2]				loaderLib(Preferences.pref.sitePath+"/playlists/"+cc[2]+"-"+(cc[1].length<2 ? "0"+cc[1] : cc[1])+"-"+(cc[0].length<2 ? "0"+cc[0] : cc[0])+".xml");				myTween = new Tween(cal,"alpha",Strong.easeOut,cal.alpha,0,1,true);			});			cal.alpha = 0;			this.addChild(cal)			//			setPos(hh);		}		function pager(p:String):void {			page+=parseInt(p);			if (page<0) {				page = 0;			} else {				if (page>int(myFileList.childNodes[0].childNodes.length/listN)) page = int(myFileList.childNodes[0].childNodes.length/listN); 				setPage()			}		}		function paletteHideShow(pp:String):void {			var p = pp			if (p == "today") {				var now = new Date();				var path = Preferences.pref.libraryList.childNodes[0].childNodes[0].attributes.val;				Preferences.pref.sitePath = path.substring(0, path.indexOf("/",8));								listTit.text = "Today: "+(now.getDate().toString().length<2 ? "0"+now.getDate().toString() : now.getDate().toString())+"-"+((now.getMonth()+1).toString().length<2 ? "0"+(now.getMonth()+1).toString() : (now.getMonth()+1).toString())+"-"+now.getFullYear();				loaderLib(Preferences.pref.sitePath+"/playlists/"+now.getFullYear()+"-"+((now.getMonth()+1).toString().length<2 ? "0"+(now.getMonth()+1) : now.getMonth()+1)+"-"+(now.getDate().toString().length<2 ? "0"+now.getDate() : now.getDate())+".xml");			} else if (p == "cal") {				myTween = new Tween(cal,"alpha",Strong.easeOut,cal.alpha,1,1,true);			} else {				p = parseInt(pp);				listTit.text = Preferences.pref.libraryList.childNodes[0].childNodes[p].attributes.m				loaderLib(Preferences.pref.libraryList.childNodes[0].childNodes[p].attributes.val);			}			for (var b=0;b<listN;b++){				listSprites[b].svuota();			}			for (var a=0; a<listPulsa.length; a++) {				if (listPulsa[a].param!=pp) {					listPulsa[a].myEnable()				} else {					listPulsa[a].myDisable()				}			}		}		function loaderLib(b:String):void {			Preferences.pref.interfaceTrgt.startLoading();			Preferences.pref.interfaceTrgt.myloaded = false;			myLoader = new URLLoader(new URLRequest(b));			myLoader.addEventListener("complete", loadLibEsito);			myLoader.addEventListener("ioError", loadLibEsito);		}		public function loadLibEsito(event:Event):void {			if (event.type == "complete") {				Preferences.pref.interfaceTrgt.myloaded = true;				Preferences.pref.interfaceTrgt.stopLoading();				myFileList = new XMLDocument();				myFileList.ignoreWhite = true;				myFileList.parseXML(myLoader.data);				//myMovie.text = myFileList.childNodes[0].attributes.path;				//myMovie.textColor = Preferences.pref.th.color;				/*trace(myFileList.childNodes[0]);				for (var a=0;a<myFileList.childNodes[0].childNodes.length;a++){					trace("tit "+myFileList.childNodes[0].childNodes[a].childNodes[1].childNodes[0])				}*/				var a = 0;				if (firstTime) {					firstTime = false;					var t = 0;					var now = getDaySeconds()*1000;					//var now = 1600000;					while (t<now) {						t+=parseFloat(myFileList.childNodes[0].childNodes[a].childNodes[1].childNodes[2].childNodes[0].toString());						a++;					}					a--;					t-=parseFloat(myFileList.childNodes[0].childNodes[a].childNodes[1].childNodes[2].childNodes[0].toString());					goToSec = int((now-t)/1000);					if (goToSec > 40) {						Preferences.pref.interfaceTrgt.startAlert();					}					//trace("goToSec "+a+" "+goToSec)					if (goToSec) {						//trace("Buffer "+Preferences.pref.monitorTrgt.levels["ch_"+0].NS.bufferTime)						Preferences.pref.monitorTrgt.levels["ch_"+0].NS.bufferTime+= goToSec;						//trace("Buffer "+Preferences.pref.monitorTrgt.levels["ch_"+0].NS.bufferTime)					}				}				Preferences.pref.currentMedia = a;				myLoad(a);				updatePage()			} else {				if (l == 0) {					loaderLib(Preferences.pref.libraryList.childNodes[0].attributes.path+currLib);				} else if (l == 1) {					loaderLib(Preferences.pref.libraryList.childNodes[0].attributes.path+currLib+".flx");				} else if (l == 2) {					loaderLib("library/"+currLib+".flx");				} else {					loadErr();				}				l++;			}		}		public function updatePage() {			page = int(Preferences.pref.currentMedia/listN);			trace("page"+page)			trace("page"+int(page))			setPage()		}		public function setPage() {			pages.text = page+ " of "+int(myFileList.childNodes[0].childNodes.length/listN)+" PAGES"			for (var b=0;b<listN;b++){				if (b+(listN*page)<myFileList.childNodes[0].childNodes.length){					listSprites[b].riempi(myFileList.childNodes[0].childNodes[b+(listN*page)],b+(listN*page));				} else {					listSprites[b].svuota();				}			}		}		function getDaySeconds():Number {			now = new Date();			var today = new Date(now.getFullYear(),now.getMonth(),now.getDate());			return int((now.getTime()-today.getTime())/1000);		}		function myLoad(a):void {			trace(Preferences.pref.monitorTrgt.levels["ch_"+1].swfLoader.content.riempi)			Preferences.pref.monitorTrgt.levels["ch_"+1].swfLoader.content.riempi(myFileList.childNodes[0].childNodes[a], a);			Preferences.pref.interfaceTrgt.showSottopancia();			Preferences.pref.interfaceTrgt.firstPlay = true;			Preferences.pref.currentMedia = a;			myLoadMovieMore(myFileList.childNodes[0].childNodes[a].childNodes[0].childNodes[0],myFileList.childNodes[0].childNodes[a].childNodes[0].childNodes[0]);			updatePage()		}		function myLoadMovie(a:String,p:String):void {			Preferences.pref.nLoadErr["ch_"+ch] = 0;			myLoadMovieMore(a,p);		}		public function myLoadMovieMore(a:String,p:String):void {			Preferences.pref.monitorTrgt.myStarted = Preferences.pref.monitorTrgt.myloaded = false;			if (p.indexOf("/") == -1) {				p = myPath+p;			}			current_mov = p;			tipo = p.substring(p.length-3, p.length).toLowerCase();			trace(tipo);			if (tipo == "txt") {				this.tipo = "swf";				this.myTxtEditor.myTxtLoader.load(new URLRequest(this.current_mov));			} else {				if (tipo == "flv" || tipo == "avi" || tipo == "mov" || tipo == "mpg" || tipo == "mp4" || tipo == "m4v") {					tipo = "flv";					lastLiveAct = ",loadFlv,"+ch+","+current_mov+","+tipo+","+100;				} else if (tipo == "mp3") {					lastLiveAct = ",loadMp3,"+ch+","+current_mov+","+tipo+","+100;				} else {					tipo = "swf";					lastLiveAct = ",loadMedia,"+ch+","+current_mov+","+tipo+","+100;				}				trace("VJTVch")				Preferences.pref.monitorTrgt.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);			}			oldTipo = tipo;			Preferences.pref.interfaceTrgt.startLoading();		}		function load_url(a:String):void {			var tmp:String = Preferences.myReplace(current_mov,myPath,"");			myLoadMovie(tmp,tmp);		}		public function loadErr():void {			trace("FILE NOT FOUND")			/*myMovie.text = "FILE NOT FOUND";			myMovie.textColor = 0xFF0000;			myMovie.setSelection(0, 0);*/		}		public function setPos(hh):void {			x = int((Preferences.pref.w-500)/2);			h = int(int((hh-50)/110)*110)-10+50;			pages.y = succ.y = prev.y = h-23;			myY = int((hh-h)/2);			if (Preferences.pref.interfaceTrgt.menuIsClose) {				y = Preferences.pref.h;			} else {				y = myY;			}			listN = int((hh-50)/110);			fondino.height = h;			var a			var oldListSprites = listSprites.length;			if (listN>oldListSprites) {				for (a=oldListSprites;a<listN;a++){					listSprites.push(new VJTVListItem((a*110)+25, myLoad, Preferences.pref.interfaceTrgt.showInfo));					list.addChild(listSprites[a]);				}			} else if (listN<oldListSprites) {				trace("rimuovi"+oldListSprites)				trace("rimuovi"+listN)				for (a=oldListSprites-1;a>=listN;a--){				trace("rimuovi->"+a)					list.removeChild(listSprites[a]);					listSprites.pop();				}			}			cal.x = (500-242)/2;			cal.y = (fondino.height-177)/2;			if (myFileList is XMLDocument) setPage()		}		/*		private function selectHandler(event:Event):void {            var file:FileReference = FileReference(event.target);            trace("selectHandler: name=" + file.name);            MyFile.load();        }		public function useMap(event:Event) {			lastLiveAct = ",useMap,"+this.ch+","+Preferences.myReplace(MyFile.data,",",";");			trace(MyFile.data)			//this.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+",changeBlend,"+ch+","+p);			if (outStatus) {				parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);			} else {				liveA.useMap = lastLiveAct;			}			sliderFnz2();		}		public function initHandlerSWF(l:Loader):void {		}		public function initHandlerJPG(l:Loader):void {		}		public function initHandlerFLV(event:Event):void {		}		public function initHandlerMP3():void {		}		public function change_ch():void {			if (Preferences.pref.ch != this.ch){				Preferences.pref.ch = this.ch;				for (var a=0; a<Preferences.pref.nCh; a++) {					this.change_col(this.parent.chCnt["ch_"+a].led, 0x00000);					if (Preferences.pref.fs) {						this.parent.chCnt["ch_"+a].visible = false;					}				}				this.change_col(this.led, 0xFF0000);			}			if (Preferences.pref.fs) {				this.visible = true;			}		}		function treDengineONOFF(p:String):void {			parent.parent.myTreDengine.treDengineONOFF(p, ch)		}		public function change_col(trgt:Sprite, col:uint):void {			var myCol:ColorTransform = trgt.transform.colorTransform;			myCol.color = col;			trgt.transform.colorTransform = myCol;		}		public function loadErr():void {			myMovie.text = "FILE NOT FOUND";			myMovie.textColor = 0xFF0000;			myMovie.setSelection(0, 0);		}		function lockWipe(p:Boolean):void {			change_ch();			lockWipeStatus = p;		}		function changeBlend(a:String,p:String):void {			change_ch();			lastLiveAct = ",changeBlend,"+this.ch+","+p;			//this.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+",changeBlend,"+ch+","+p);			if (outStatus) {				parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);			} else {				liveA.changeBlend = lastLiveAct;			}		}		public function mySwapDepth(p:int):void {			myDepth = parent.parent.monitor.mon.getChildIndex(parent.parent.monitor.levels["ch_"+ch]);			change_ch();			if (p != 0) {				if ((this.myDepth+p<Preferences.pref.nCh) && (this.myDepth+p>=0)) {					myDepth += p;					//if (outStatus) {					parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+",mySwapDepth,"+this.ch+","+this.myDepth);					for (var a = 0; a<Preferences.pref.nCh; a++) {						this.parent.chCnt["ch_"+a].myDepthF.text = (parent.parent.monitor.mon.getChildIndex(parent.parent.monitor.levels["ch_"+a])+1);					}					//}				}			}		}		function live(p:Boolean):void {			change_ch();			this.outStatus = p;			if (p) {				for (var i in liveA) {					parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+liveA[i]);				}				liveA = new Object();			}		}		function loadDvIn(p:Boolean):void {			change_ch();			trace(Preferences.pref.plugin.childNodes[0].childNodes[1])			if (p) {				myLibSel.myDisable();				myLibSel.setVal("select playlist",0);								myPath = Preferences.pref.plugin.childNodes[0].childNodes[1].attributes.path;				myFileList = new XMLDocument();				myFileList.parseXML("<lib>"+Preferences.pref.plugin.childNodes[0].childNodes[1]+"</lib>")				myFileSel.avvia(Preferences.pref.plugin.childNodes[0].childNodes[1]);			} else {				myLibSel.myEnable();			}		}		function showTxtEditor(p:Boolean):void {			change_ch();			myLibSel.visible = !p;			myFileSel.visible = !p;			myDvIn.visible = !p;			myMovie.visible = !p;			myMovieL.visible = !p;			myTxtEditor.visible = p;			if (p) {				myTxtEditor.myTxtField.setSelection(0,10);				//c = setInterval(mySetFocus, 300);			} else {				//Selection.setFocus(null);			}		}		function mySetFocus():void {			clearInterval(c);			trace("mySetFocusmySetFocusmySetFocus")		}		function sliderFnz(p:Number):void {			sliderVal = p;			sliderFnz2();		}		function mouseSlider(p:Number):void {			mySlider.curs.y = (((p))/100)*(mySlider.path.height-mySlider.curs.height);			sliderVal = 100-(p);			mySlider.curs.lab.text = int(sliderVal);			sliderFnz2();		}		function keySlider(p:Number):void {			if (sliderVal+p>=0 && sliderVal+p<=100) {				sliderVal += p;				mySlider.curs.y = ((-sliderVal/100)+1)*(mySlider.path.height-mySlider.curs.height);				mySlider.curs.lab.text = int(sliderVal);				sliderFnz2();			}		}		function sliderFnz2():void {			lastLiveAct = ",slideWipe,"+this.ch+","+this.sliderVal+","+this.myWipe.getVal();			if (outStatus) {				parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);			} else {				liveA.slideWipe = lastLiveAct;			}		}		function changeWipe(a:String,p:String):void {			lastLiveAct = "";			change_ch();			if (p != "WIPE NONE (MIX)" && p != "VERTICAL" && p != "HORIZONTAL" && p.indexOf("LOAD SVG MAP")==-1) {				lastLiveAct = ",changeWipe,"+this.ch+","+Preferences.pref.plugin.childNodes[0].childNodes[0].attributes.path+p+","+this.sliderVal;			} else if (p.indexOf("LOAD SVG MAP")!=-1) {	            MyFile.browse([new FileFilter("Vector file", "*.svg")]);							} else {				lastLiveAct = ",redrawWipe,"+this.ch;			}			if (lastLiveAct) {				if (outStatus) {					parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);				} else {					liveA.changeWipe = lastLiveAct;				}				sliderFnz2();			}		}		public function eject(p:String):void {			mySlider.resetta();			treD.resetta();			myFileSel.resetta();			myMovie.resetta();			myController.resetta();			//myDepth.resetta();			myBlend.resetta();			if (mySequencer.seqStatus) {				mySequencer.seq.mouseDownHandler(null);			}			myColors.resetta();			myTrasform.resetta("");			myImage.resetta();			lastLiveAct = ",eject,"+this.ch;			if (outStatus) {				parent.parent.monitor.mbuto((getTimer()-Preferences.pref.lastTime)+lastLiveAct);			} else {				liveA.eject = lastLiveAct;			}		}*/	}}