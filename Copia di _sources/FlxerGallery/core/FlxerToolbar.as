package FlxerGallery.core {	import flash.display.Stage;	import flash.display.MovieClip;	import flash.events.*;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;    import flash.ui.ContextMenuBuiltInItems;	import flash.ui.Keyboard;	import flash.geom.Rectangle;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.utils.getTimer;	import flash.net.navigateToURL;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.printing.PrintJob;	import flash.geom.ColorTransform;	import FlxerGallery.main.BitmapDataToBinaryPNG	import FlxerGallery.main.ByteArrayUploader;		import fl.transitions.*;	import fl.transitions.easing.*;	import flash.utils.*;    import flash.ui.Mouse;    import flash.events.*;	import flash.system.Security;	import flash.external.*;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.display.MovieClip;	import FlxerGallery.main.DrawerFunc;		public class FlxerToolbar extends MovieClip {		var w;		var h;		//		public var testa		public var fondo		public var piede		public var tit		public var mmSelTit		var barr_width		var bd		var ppBig		var scratchOFF;        private var myContextMenu:ContextMenu;		var myTween;		var myTween2;		var mL;		public var mcWF:MovieClip;		var cfg:Object;		var fondoE;		/*		public var myEmbed		var tipo		var single		var myKeyL;		var noImg;		var t		*/		public function FlxerToolbar() {			//piede.fs.visible=piede.m.visible=false;			scratchOFF = true;			piede.toppa.visible = true;			avviaPuls();			/*this.myEmbed = new Embed();*/			testa.fondo.height = Preferences.pref.testaH;				testa.y = Preferences.pref.testaY;				var myCol:ColorTransform			myCol = this.testa.fondo.transform.colorTransform;			myCol.color = Preferences.pref.toolbarHead;			this.testa.fondo.transform.colorTransform = myCol;						testa.lab_i.textColor = Preferences.pref.toolbarHeadTxt;						myCol = this.piede.toppa.transform.colorTransform;			myCol.color = Preferences.pref.toolbarBackground;			this.piede.toppa.transform.colorTransform = myCol;						myCol = this.piede.piedeEst.transform.colorTransform;			myCol.color = Preferences.pref.toolbarBorder;			this.piede.piedeEst.transform.colorTransform = myCol;						myCol = piede.piedeInt.transform.colorTransform;			myCol.color = Preferences.pref.toolbarBackground;			piede.piedeInt.transform.colorTransform = myCol;			myCol = piede.indice.barrEst.transform.colorTransform;			myCol.color = Preferences.pref.btnBorder;			piede.indice.barrEst.transform.colorTransform = myCol;			myCol = piede.indice.barr.transform.colorTransform;			myCol.color = Preferences.pref.btnBkg;			piede.indice.barr.transform.colorTransform = myCol;						piede.counter.lab.textColor = Preferences.pref.btnBorder;						//piede.counter.lab.width = piede.counter.lab.textWidth+8			setPos();		}		function setL() {			trace("hideToolbar"+Preferences.pref.toolbarBottom);			if (Preferences.pref.toolbarBottom == false) {				hideToolbar(null);				//stage.addEventListener(Event.MOUSE_LEAVE, hideToolbar);				this.addEventListener(MouseEvent.MOUSE_MOVE, showToolbar);			}		}		function hideToolbar(e) {			clearInterval(mL);			myTween = new Tween(piede,"alpha",Strong.easeIn,1,0,2,true);			myTween2 = new Tween(testa,"alpha",Strong.easeIn,1,0,2,true);		}		function showToolbar(e) {			clearInterval(mL);			if (piede.alpha  == 0) {				myTween = new Tween(piede,"alpha",Strong.easeIn,0.01,1,1,true);				myTween2 = new Tween(testa,"alpha",Strong.easeIn,0.01,1,1,true);			}			mL = setInterval(hideToolbar,3000,null);		}		function avviaPuls() {			trace("avviaPuls"+piede.s)			piede.s.avvia({fnz:apriEmbed,txt:Preferences.pref.lab[Preferences.pref.lng].sLabel,alt:Preferences.pref.lab[Preferences.pref.lng].sAlt});			try {				if (ExternalInterface.available) {					ExternalInterface.addCallback("apriEmbed",apriEmbed);				}			}			catch (error) {				trace(error);			}			piede.m.avvia({fnz:apriMenu,txt:Preferences.pref.lab[Preferences.pref.lng].mLabel,alt:Preferences.pref.lab[Preferences.pref.lng].menuAlt});			piede.fs.avvia({fnz:fs,txt:Preferences.pref.lab[Preferences.pref.lng].fsLabel,alt:Preferences.pref.lab[Preferences.pref.lng].fsAlt});			//			if (Preferences.pref.logoAlt) {				piede.logo.avvia({fnz:vaiLogoUrl,alt:Preferences.pref.logoAlt});			} else {				piede.logo.visible = false;			}			piede.contr.fw.avvia({fnz:avanti,alt:Preferences.pref.lab[Preferences.pref.lng].fwAlt});			piede.contr.fw.simb.rotation = 180;			piede.contr.rw.avvia({fnz:indietro,alt:Preferences.pref.lab[Preferences.pref.lng].rwAlt});			piede.contr.playpause.avvia({fnz:myPlaypause,alt:Preferences.pref.lab[Preferences.pref.lng].playpauseAlt});			piede.indice.curs.avvia({fnz:scratch,alt:Preferences.pref.lab[Preferences.pref.lng].cursAlt,fnzOut:stopScratch});			piede.indice.barr.mouseChildren = false;			piede.indice.barr.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			piede.indice.barr.buttonMode=false;			piede.volume_ctrl.avvia({fnz:regolaVolume,alt:Preferences.pref.lab[Preferences.pref.lng].volumeAlt});			//disable();		}		function mouseDownHandler(event) {			piede.indice.curs.x = piede.indice.mouseX;			this["scratch_"+Preferences.pref.tipo](event)		}		public function avvia(stat) {			creaContextMenu(stat);			piede.m.visible = true;			if (stat == "player") {				//parent.mySelector.resetta();				piede.toppa.visible = false;				avviaPuls();			} else {				//parent.mySelector.avvia();				parent.parent.monitor.resetta();				piede.toppa.visible = true;				this.testa.lab_i.htmlText = mmSelTit;			}			setPos();		}		public function avviaSS(n) {			if (n is Number) {				nn = n;			} else {				nn = 0;			}			avvia("player");			this.parent.parent.monitor.avviaSS(nn);		}		public function avviaSP(n) {			if (n is Number) {				nn = n;			} else {				nn = 0;			}			avvia("player");			this.parent.parent.monitor.avvia(nn);		}		public function avviaSelector(a) {			avvia("selector");		}		public function disable() {			stage.removeEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);			piede.contr.fw.disable();			piede.contr.rw.disable();			piede.contr.playpause.disable();			piede.indice.curs.disable();			piede.volume_ctrl.disable();		}		public function enable() {			stage.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);			piede.contr.fw.enable();			piede.contr.rw.enable();			piede.contr.playpause.enable();			piede.indice.curs.enable();			piede.volume_ctrl.enable();		}		public function vaiLogoUrl(t) {			navigateToURL(new URLRequest(Preferences.pref.logoURL),"_blank")		}		function regolaVolume(a) {			parent.parent.monitor.mbuto(getTimer()+",setVol,0,"+a);		}		function setPos() {			w = Preferences.pref.w;			h = Preferences.pref.h;			testa.fondo.width = w;			testa.lab_i.width = w-10;			piede.piedeEst.width = w;			//fondo.height=h-(testa.fondo.height+1)-(piede.piedeEst.height+1);			//fondo.y = testa.fondo.height+1						piede.y = h-piede.piedeEst.height;			piede.piedeInt.width = piede.toppa.width=w-2;			var nextX = w;			if (Preferences.pref.embedPath) {				nextX = piede.s.x 	= nextX-(piede.s.puls.width+Preferences.pref.toolBarPaddingLR);			} else {				piede.s.x = w;			}			if (Preferences.pref.fpMenu) {				nextX = piede.m.x 	= nextX-(piede.m.puls.width+Preferences.pref.toolBarPaddingLR);			} else {				piede.m.x = w;			}			if (Preferences.pref.fullscreenBtn) {				nextX = piede.fs.x 	= nextX-(piede.fs.puls.width+Preferences.pref.toolBarPaddingLR);			} else {				piede.fs.x = w;			}			if (ppBig!=undefined) {				ppBig.x = (w-ppBig.width)/2;				ppBig.y = (Preferences.pref.toolbarBottom ? (piede.y-ppBig.height)/2 : (h-ppBig.height)/2);			}			//piede.selector.x = piede.m.x-(piede.selector.puls.width+Preferences.pref.toolBarPaddingLR)-2			/*var deltaW = 0;			if (Preferences.pref.single) {				deltaW = 48;			}			var bbb = 1;			if (piede.selector.visible) {				piede.contr.x = piede.selector.x-piede.contr.width-2;				bbb = 1;			} else {				piede.contr.x = piede.m.x-piede.contr.width-2;				bbb = 1.8;			}			if (!piede.volume_ctrl.visible) {				piede.contr.x+=piede.volume_ctrl.width+2; 			}*/			//piede.counter.lab.width = piede.counter.lab.textWidth+Preferences.pref.deltaCounter;						//if (piede.volume_ctrl.buttonMode) {			if (Preferences.pref.tipo == "jpg") {				piede.volume_ctrl.x = w+1;				piede.contr.fw.x = piede.contr.playpause.x + piede.contr.playpause.width+Preferences.pref.toolBarPaddingLR			} else {				nextX = piede.volume_ctrl.x = nextX-(piede.volume_ctrl.width+Preferences.pref.toolBarPaddingLR);				if (Preferences.pref.forward) {					piede.contr.fw.x = piede.contr.playpause.x + piede.contr.playpause.width+Preferences.pref.toolBarPaddingLR;				} else {					piede.contr.fw.x = piede.contr.rw.x				}			}			piede.counter.fondo.width = piede.counter.lab.textWidth+(Preferences.pref.toolBarPaddingLR*2);			piede.counter.x = nextX-(piede.counter.fondo.width+Preferences.pref.toolBarPaddingLR);			//piede.indice.visible = false			piede.indice.x = piede.contr.x+piede.contr.width+Preferences.pref.toolBarPaddingLR-piede.indice.fondo.x;			piede.indice.fondo.width = piede.counter.x-(piede.indice.x + piede.indice.fondo.x)			piede.indice.barr.width = piede.indice.fondo.width + (piede.indice.fondo.x*2);			piede.indice.barrEst.width = piede.indice.barr.width-(piede.indice.barrEst.x*2);			barr_width = piede.indice.barr.width;			/*piede.contr.x = int(w-(piede.selector.x+piede.selector.lab.textWidth+5)-(w-piede.m.x)+deltaW-20);			piede.ss.x = w-95;*/			if (mcWF) {				mcWF.x=int((Preferences.pref.w-cfg['width'])/2);				mcWF.y=int((Preferences.pref.h-cfg['height'])/2);				fondoE.x = -mcWF.x;				fondoE.y = -mcWF.y;				fondoE.width = Preferences.pref.w;				fondoE.height = Preferences.pref.h;			}		}		//		function scratch(t) {			avvia_scratch();			piede.indice.curs.startDrag(false,new Rectangle(piede.indice.barr.x,piede.indice.barr.y,piede.indice.barr.width,0));		}		function stopScratch(t) {			scratchOFF = true;			if (piede.contr.playpause.simb.currentFrame == 2 && Preferences.pref.tipo == "flv") {				this.parent.parent.monitor.levels["ch_"+0].NS.resume();			}			this.removeEventListener(Event.ENTER_FRAME, this["scratch_"+Preferences.pref.tipo]);			avvia_indice();			piede.indice.curs.stopDrag();		}			function avvia_scratch() {			scratchOFF = false;			this.removeEventListener(Event.ENTER_FRAME, this["indice_"+Preferences.pref.tipo]);			this.parent.parent.monitor.levels["ch_"+0].NS.pause();			if (Preferences.pref.tipo == "mp3") {				this.parent.parent.monitor.levels["ch_"+0].myStopStatus = false;				piede.contr.playpause.simb.gotoAndStop(2);			}			this.addEventListener(Event.ENTER_FRAME, this["scratch_"+Preferences.pref.tipo]);		}		function scratch_swf(event) {			this.parent.parent.monitor.mbuto(getTimer()+",SCRATCHswf,0,"+(piede.indice.curs.x/barr_width));		}		function scratch_flv(event) {			this.parent.parent.monitor.mbuto(getTimer()+",SCRATCHflv,0,"+(piede.indice.curs.x/barr_width));		}		function scratch_mp3(event) {			this.parent.parent.monitor.mbuto(getTimer()+",SCRATCHmp3,0,"+(piede.indice.curs.x/barr_width));		}		//		function avanti(t) {			this.parent.parent.monitor.mbuto(getTimer()+",FORWARD,0,");		}		function indietro(t) {			this.parent.parent.monitor.mbuto(getTimer()+",REWIND,0,");		}		function myPlaypause(t) {			if (scratchOFF){				if (this.parent.parent.monitor.levels["ch_"+0].myStopStatus) {					piede.contr.playpause.simb.gotoAndStop(2);					this.parent.parent.monitor.mbuto(getTimer()+",PLAY,0")				} else {					piede.contr.playpause.simb.gotoAndStop(1);					this.parent.parent.monitor.mbuto(getTimer()+",STOP,0")				}			}		}		public function myRemoveThumb(t) {		}		public function myRemoveThumb2(t) {			Preferences.pref.autostop = "false";			piede.contr.playpause.avvia({fnz:myPlaypause,fnzOut:null,alt:Preferences.pref.lab[Preferences.pref.lng].playpauseAlt});			parent.parent.monitor.avvia(0)			if (Preferences.pref.myViPath) {				var myLoader = new URLLoader(new URLRequest(Preferences.pref.myViPath+parent.parent.monitor.currMov));			}			this.removeChild(ppBig);			if (Preferences.pref.thumbSaver) {				this.parent.myThumbSaver.addChild(this.parent.myThumbSaver.shot);				this.parent.myThumbSaver.removeChild(this.parent.myThumbSaver.newT)			}		}		public function visualizzappBig() {			this.ppBig = new PlayBig();			this.addChild(ppBig);			ppBig.x = (w-ppBig.width)/2;			ppBig.y = (Preferences.pref.toolbarBottom ? (piede.y-ppBig.height)/2 : (h-ppBig.height)/2);			ppBig.avvia({fnz:myRemoveThumb,fnzOut:myRemoveThumb2,alt:Preferences.pref.lab[Preferences.pref.lng].ppBigAlt});			ppBig.gotoAndStop(1);					}		function creaContextMenu(stat) {			var item			myContextMenu = new ContextMenu();			myContextMenu.hideBuiltInItems();			if (!Preferences.pref.single) {				if (stat == "player") {					item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].pLabel)					item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,avviaSelector);					myContextMenu.customItems.push(item);				} else {					item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].ssLabel)					item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,avviaSS);					myContextMenu.customItems.push(item);					//mPlay.customItems.push(new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].pLabel,avviaSelector));					if (Preferences.pref.noImg) {						myContextMenu.customItems[0].enabled = false;						myContextMenu.customItems[0].caption = Preferences.pref.lab[Preferences.pref.lng].ssLabelNoImg;					}					//myContextMenu.customItems[2].caption = Preferences.pref.lab[Preferences.pref.lng].ssLabelNoImg;				}			}			item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].fitLabel)			item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,scaleFit);			myContextMenu.customItems.push(item);			item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].noscLabel)			item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,scale100);			myContextMenu.customItems.push(item);			if (Preferences.pref.fullscreenBtn) {				item = new ContextMenuItem(""+Preferences.pref.lab[Preferences.pref.lng].fsLabel+"")				myContextMenu.customItems.push(item);				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,fs);			}			//item = new ContextMenuItem("Print this content")			//myContextMenu.customItems.push(item);			item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,myPrint);			if (Preferences.pref.downPath) {				item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].dwLabel)				myContextMenu.customItems.push(item);				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,dw);			}			if (Preferences.pref.embedPath) {				item = new ContextMenuItem(Preferences.pref.lab[Preferences.pref.lng].emLabel)				myContextMenu.customItems.push(item);				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,this.apriEmbed);			}			myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);			if (stat != "player") {				myContextMenu.customItems[1].enabled = false;				myContextMenu.customItems[2].enabled = false;			}			parent.contextMenu = myContextMenu;		}        private function menuSelectHandler(event:ContextMenuEvent):void {            trace("menuSelectHandler: " + event);        }		function apriMenu(t) {			var menuTxt = "";			if (!this.parent.myMenu.visible) {				if (piede.toppa.visible) {					if (!Preferences.pref.single) {						if (!Preferences.pref.noImg) {							menuTxt += "<div><a href=\"event:"+this+".avviaSS\">"+Preferences.pref.lab[Preferences.pref.lng].ssLabel+"</a></div>";						} else {							menuTxt += "<div>"+Preferences.pref.lab[Preferences.pref.lng].ssLabelNoImg+"</div>";						}					}					menuTxt += "<div>"+Preferences.pref.lab[Preferences.pref.lng].fitLabel+"</div>";					menuTxt += "<div>"+Preferences.pref.lab[Preferences.pref.lng].noscLabel+"</div>";					if (Preferences.pref.fullscreenBtn) {						menuTxt += "<div><a href=\"event:"+this+".fs\">"+Preferences.pref.lab[Preferences.pref.lng].fsLabel+"</a></div>";					}					//menuTxt += "<div><a href=\"event:"+this+".myPrint\">Print this content</a></div>";					if (Preferences.pref.downPath) {						menuTxt += "<div>"+Preferences.pref.lab[Preferences.pref.lng].dwLabel+"</div>";					}				} else {					if (!Preferences.pref.single) {						menuTxt += "<div><a href=\"event:"+this+".avviaSelector\">"+Preferences.pref.lab[Preferences.pref.lng].pLabel+"</a></div>";					}					menuTxt += "<div><a href=\"event:"+this+".scaleFit\">"+Preferences.pref.lab[Preferences.pref.lng].fitLabel+"</a></div>";					menuTxt += "<div><a href=\"event:"+this+".scale100\">"+Preferences.pref.lab[Preferences.pref.lng].noscLabel+"</a></div>";					if (Preferences.pref.fullscreenBtn) {						menuTxt += "<div><a href=\"event:"+this+".fs\">"+Preferences.pref.lab[Preferences.pref.lng].fsLabel+"</a></div>";					}					//menuTxt += "<div><a href=\"event:"+this+".myPrint\">Print this content</a></div>";					if (Preferences.pref.downPath) {						menuTxt += "<div><a href=\"event:"+this+".dw\">"+Preferences.pref.lab[Preferences.pref.lng].dwLabel+"</a></div>";					}				}				if (Preferences.pref.embedPath) {					menuTxt += "<div><a href=\"event:"+this+".apriEmbed\">"+Preferences.pref.lab[Preferences.pref.lng].emLabel+"</a></div>";				}				this.parent.myMenu.wordWrap=false;				this.parent.myMenu.addEventListener(TextEvent.LINK, linkHandler);				this.parent.myMenu.htmlText = "<p class=\"playerMenu\">"+menuTxt+"</p>";				this.parent.myMenu.height = this.parent.myMenu.textHeight+5;				this.parent.myMenu.width = this.parent.myMenu.textWidth+10;				this.parent.myMenu.x = w-this.parent.myMenu.width-4;				this.parent.myMenu.y = piede.y-this.parent.myMenu.height;				//this.parent.myMenu.fondo.y = -this.parent.myMenu.y-piede.y;				//this.parent.setChildIndex(this, this.parent.numChildren-1);			}			this.parent.myMenu.visible = !this.parent.myMenu.visible;		}		function linkHandler(e) {			this.parent.myMenu.visible = false;			//this.parent.setChildIndex(this, this.parent.numChildren-2);			this[e.text.substring(e.text.indexOf(".")+1, e.text.length)](e);		}		//		public function fs(e):void {			switch (stage.displayState) {				case "normal" :					stage.displayState="fullScreen";					break;				case "fullScreen" :				default :					stage.displayState="normal";					break;			}		}		public function scaleFit(e) {			Preferences.pref.resizza_onoff = true;			parent.parent.monitor.setPos();		}		public function scale100(e) {			Preferences.pref.resizza_onoff=false;			parent.parent.monitor.setPos();		}		public function myPrint(e) {			if (piede.contr.playpause.currentFrame == 2) {				myPlaypause(null);			}			var pageCount:Number = 0;			var my_pj:PrintJob = new PrintJob();			if (my_pj.start()) {				if (my_pj.addPage(this.parent)) {					pageCount++;				}			}			if (pageCount>0) {				my_pj.send();			}		}		public function apriEmbed(e) {			if (!mcWF) {				trace("apriEmbed")				Security.allowDomain("cdn.gigya.com");				Security.allowInsecureDomain("cdn.gigya.com");				cfg = {};				cfg['width'] = Preferences.pref.embedPWidth;				cfg['height'] = Preferences.pref.embedPHeight;				cfg['UIConfig'] = Preferences.pref.embedConfig;				cfg['CID'] = Preferences.pref.CID;				cfg['widgetTitle'] = Preferences.pref.embedTitle;				cfg['useFacebookMystuff'] = "false";				cfg['partner'] = Preferences.pref.embedPartner;				var flashvar = "?";				var conta = 0				for (var keyStr:String in Preferences.pref.flashvar) {					if (keyStr!="isEmbed") {						if (conta) flashvar+= "&";						flashvar+= keyStr+"="+Preferences.pref.flashvar[keyStr].toString();						conta++;					}				}				var tmp = Preferences.pref.embedPath+flashvar;				cfg['defaultContent'] = "<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0\" width=\""+Preferences.pref.embedWidth+"\" height=\""+Preferences.pref.embedHeight+"\"><param name=\"movie\" value=\""+tmp+"\"></param><param name=\"wmode\" value=\"window\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\""+tmp+"\" type=\"application/x-shockwave-flash\" wmode=\"window\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\""+Preferences.pref.embedWidth+"\" height=\""+Preferences.pref.embedHeight+"\"></embed></object>"; // <-- YOUR EMBED CODE GOES HERE				cfg['useFacebookMystuff']='true';				cfg['onClose']=function(eventObj:Object):void{					removeEmbed();				}				function removeEmbed():void{					parent.removeChild(mcWF);				}								Security.allowDomain("cdn.gigya.com");				Security.allowInsecureDomain("cdn.gigya.com");				// Step 8 - This code calls up Wildfire				mcWF = new MovieClip();				parent.addChild(mcWF).name='mcWF';				mcWF.x=int((w-cfg['width'])/2);				mcWF.y=int((h-cfg['height'])/2);				fondoE = new MovieClip();				fondoE.x = -mcWF.x;				fondoE.y = -mcWF.y;				DrawerFunc.drawer(fondoE,0,0,w,h,0xFFFFFF,null,.4);				DrawerFunc.drawer(fondoE,0,0,w,h,0x000000,null,.4);				mcWF.addChild(fondoE).name='fondo';								var ldr:Loader = new Loader();				var url:String = 'http://cdn.gigya.com/Wildfire/swf/WildfireInAS3.swf?ModuleID=' + Preferences.pref.ModuleID;				var urlReq:URLRequest = new URLRequest(url);				ldr.load(urlReq);				mcWF.addChild(ldr);			} else {				mcWF.x=int((Preferences.pref.w-cfg['width'])/2);				mcWF.y=int((Preferences.pref.h-cfg['height'])/2);				fondoE.x = -mcWF.x;				fondoE.y = -mcWF.y;				fondoE.width = Preferences.pref.w;				fondoE.height = Preferences.pref.h;				parent.addChild(mcWF).name='mcWF';			}			mcWF[Preferences.pref.ModuleID] = cfg;		}		/*		public function apriEmbedOld(e) {		 		 	this.parent.addChild(this.myEmbed);			this.myEmbed.x = int(w/2);			this.myEmbed.y = int(h/2);			var tmp = Preferences.pref.embedPath+Preferences.pref.cnt;			myEmbed.lab_i.text = "<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0\" width=\""+Preferences.pref.w+"\" height=\""+Preferences.pref.h+"\"><param name=\"movie\" value=\""+tmp+"\"></param><param name=\"wmode\" value=\"window\"></param><param name=\"allowfullscreen\" value=\"true\"></param><param name=\"allowscriptaccess\" value=\"always\"></param><embed src=\""+tmp+"\" type=\"application/x-shockwave-flash\" wmode=\"window\" allowfullscreen=\"true\" allowscriptaccess=\"always\" width=\""+Preferences.pref.w+"\" height=\""+Preferences.pref.h+"\"></embed></object>";			myEmbed.c.avvia({fnzOut:chiudiEmbed,alt:Preferences.pref.lab[Preferences.pref.lng].embClose,txt:"close"})		}		public function chiudiEmbed(c) {			this.parent.removeChild(myEmbed);		}		*/		public function dw(e) {			navigateToURL(new URLRequest(Preferences.pref.downPath+this.parent.parent.monitor.currMov),"_self");		}		public function avvia_indice() {			var tmp = Preferences.pref.tipo;			if (tmp == "txt") {				tmp = "swf";			}			this.addEventListener(Event.ENTER_FRAME, this["indice_"+tmp]);		}		function myTime(mm) {			var min;			var tmp;			var tmp2;			var sec;			if (mm>60) {				tmp = int(mm/60);				if (tmp.toString().length<2) {					min = "0"+tmp;				} else {					min = tmp;				}				tmp2 = int(mm-(60*tmp));				if (tmp2.toString().length<2) {					sec = "0"+tmp2;				} else {					sec = tmp2;				}			} else {				min = "00";				if (int(mm).toString().length<2) {					sec = "0"+int(mm);				} else {					sec = int(mm);				}			}			return min+":"+sec;		}		function indice_flv(event) {			trace("aaa "+this.parent.parent.monitor.levels["ch_"+0].myDuration)			if (this.parent.parent.monitor.levels["ch_"+0].myDuration) {				trace("bbb ")				if (this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded<this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal) {					this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].NS.time)+" / "+myTime(this.parent.parent.monitor.levels["ch_"+0].myDuration);					piede.indice.barr.width = barr_width*(this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded/this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal);				} else if (this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded == this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal && this.parent.parent.monitor.myloaded == false) {					this.parent.parent.monitor.myloaded = true;					piede.indice.barr.width = barr_width;				} else {					this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].NS.time)+" / "+myTime(this.parent.parent.monitor.levels["ch_"+0].myDuration);				}				piede.indice.curs.x = (barr_width)*(this.parent.parent.monitor.levels["ch_"+0].NS.time/this.parent.parent.monitor.levels["ch_"+0].myDuration);			} else {				if (this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded<this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal) {					this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].NS.time);					piede.indice.barr.width = barr_width*(this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded/this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal);				} else if (this.parent.parent.monitor.levels["ch_"+0].NS.bytesLoaded == this.parent.parent.monitor.levels["ch_"+0].NS.bytesTotal && this.parent.parent.monitor.myloaded == false) {					this.parent.parent.monitor.myloaded = true;					piede.indice.barr.width = barr_width;				} else {					this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].NS.time);				}				piede.indice.curs.x = 0;			}		}		function indice_swf(event) {			piede.indice.curs.x = (barr_width)*(this.parent.parent.monitor.levels["ch_"+0].swfTrgt.currentFrame/this.parent.parent.monitor.levels["ch_"+0].swfTrgt.totalFrames);			this.piede.counter.lab.htmlText = myTime((this.parent.parent.monitor.levels["ch_"+0].swfTrgt.currentFrame/25)*60)+" / "+myTime((this.parent.parent.monitor.levels["ch_"+0].swfTrgt.totalFrames/25)*60);		}		function indice_mp3(event) {			if (this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesLoaded<this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesTotal) {				this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].song.position/1000)+" / "+myTime(this.parent.parent.monitor.levels["ch_"+0].mp3Sound.length/1000);				piede.indice.barr.width = barr_width*(this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesLoaded/this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesTotal);			} else if (this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesLoaded == this.parent.parent.monitor.levels["ch_"+0].mp3Sound.bytesTotal && this.parent.parent.monitor.myloaded == false) {				this.parent.parent.monitor.myloaded = true;				piede.indice.barr.width = barr_width;			} else {				this.piede.counter.lab.htmlText = myTime(this.parent.parent.monitor.levels["ch_"+0].song.position/1000)+" / "+myTime(this.parent.parent.monitor.levels["ch_"+0].mp3Sound.length/1000);			}			piede.indice.curs.x = (barr_width)*(this.parent.parent.monitor.levels["ch_"+0].song.position/this.parent.parent.monitor.levels["ch_"+0].mp3Sound.length);		}		function reportKeyDown(e) {			if (e.keyCode == Keyboard.LEFT) {				indietro(null);			}			if (e.keyCode == Keyboard.RIGHT) {				avanti(null);			}			if (e.keyCode == Keyboard.SPACE) {				myPlaypause(null)			}		}		function resetta() {			piede.contr.playpause.simb.gotoAndStop(1);			piede.indice.curs.x = 0;		}	}}